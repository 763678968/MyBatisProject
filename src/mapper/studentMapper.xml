<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--&lt;!&ndash;namespace：该mapper.xml映射文件的唯一标识&ndash;&gt;-->
<!--<mapper namespace="mapper.studentMapper">-->
<!--    &lt;!&ndash; 后续通过namespace.id &ndash;&gt;-->
<!--    &lt;!&ndash; parameterType：输入参数的类型 &ndash;&gt;-->
<!--    &lt;!&ndash; resultType：查询返回结果值的类型，返回类型 &ndash;&gt;-->
<!--    <select id="queryStudentByStuno" resultType="student" parameterType="int">-->
<!--        select * from student where stuno = #{stuno}-->
<!--    </select>-->

<!--    <insert id="addStudent" parameterType="student">-->
<!--        insert into student(stuno, stuname, stuage, graname)  values(#{stuNo}, #{stuName},#{stuAge},#{graName})-->
<!--    </insert>-->

<!--    <update id="updateStudentByStuno" parameterType="student">-->
<!--        update student set stuname = #{stuName}, stuage = #{stuAge}, graname = #{graName} where stuno = #{stuNo}-->
<!--    </update>-->

<!--    <delete id="deleteStudentByStuno" parameterType="int">-->
<!--        delete from student where stuno = #{stuno}-->
<!--    </delete>-->

<!--    <select id="queryAllStudents" resultType="student">-->
<!--        select * from student-->
<!--    </select>-->
<!--</mapper>-->


<!-- 操作MyBatis的接口 -->
<mapper namespace="mapper.StudentMapper">
    <!-- 后续通过namespace.id -->
    <!-- parameterType：输入参数的类型 -->
    <!-- resultType：查询返回结果值的类型，返回类型 -->

    <sql id="ObjectArrayStunos">
        <where>
            <if test="array != null and array.length">
                <foreach collection="array" open=" and stuno in (" close=")"
                         item="student" separator=",">
                    #{student.stuNo}
                </foreach>
            </if>
        </where>
    </sql>

<!--    <select id="queryStudentCount" resultType="int">-->
<!--            select count(*) from student-->
<!--    </select>-->

<!--    <select id="queryStudentById" parameterType="int" resultMap="queryStudentById">-->
<!--            select id, name from student where id = #{id}-->
<!--    </select>-->
<!--    <resultMap id="queryStudentById" type="student">-->
<!--&lt;!&ndash;        指定类中的属性和表中的字段对应关系&ndash;&gt;-->
<!--        <id property="stuNo" column="id"/>-->
<!--        <result property="stuName" column="name"/>-->
<!--    </resultMap>-->

<!--    <select id="queryStudentByIdWithHashMap" parameterType="int" resultType="student">-->
<!--            select id "stuNo", name "stuName" from student where id = #{id}-->
<!--    </select>-->

<!--    <select id="queryStuByNOrAWithSQLTag" parameterType="student" resultType="student">-->
<!--            select stuno, stuname, stuage from student where 1 = 1-->
<!--            &lt;!&ndash; if test="student有stuname属性，且不为null" &ndash;&gt;-->
<!--            <if test="stuName != null and stuName != '' ">-->
<!--                and stuname = #{stuName}-->
<!--            </if>-->

<!--            <if test="stuAge != null and stuAge != 0 ">-->
<!--                and stuage = #{stuAge}-->
<!--            </if>-->
<!--    </select>-->

    <select id="queryStuByNOrAWithSQLTag" parameterType="student" resultType="student">
        select stuno, stuname, stuage from student
        <where>
            <!-- if test="student有stuname属性，且不为null" -->
            <if test="stuName != null and stuName != '' ">
                and stuname = #{stuName}
            </if>

            <if test="stuAge != null and stuAge != 0 ">
                and stuage = #{stuAge}
            </if>
        </where>
    </select>

<!--    将多个元素值放入对象的属性中-->
    <select id="queryStudentsWithNosInGrade" parameterType="grade" resultType="student">
            select * from student
            <where>
                <if test="stuNos != null and stuNos.size > 0">
                    <foreach collection="stuNos" open=" and stuno in (" close=")"
                             item="stuNo" separator=",">
                        #{stuNo}
                    </foreach>
                </if>
            </where>
    </select>

    <!--    将多个元素值放入数组中int[] stuNos = {1, 2, 53} -->
    <select id="queryStudentsWithArray" parameterType="int[]" resultType="student">
        select * from student
        <where>
            <if test="array != null and array.length">
                <foreach collection="array" open=" and stuno in (" close=")"
                         item="stuNo" separator=",">
                    #{stuNo}
                </foreach>
            </if>
        </where>
    </select>

    <!--    将多个元素值放入集合中List<Integer> stuNos 值 {1, 2, 53} -->
    <select id="queryStudentsWithList" parameterType="list" resultType="student">
        select * from student
        <where>
            <if test="list != null and list.size">
                <foreach collection="list" open=" and stuno in (" close=")"
                         item="stuNo" separator=",">
                    #{stuNo}
                </foreach>
            </if>
        </where>
    </select>

    <!--    将多个元素值放入对象数组中Student[] students = {student0, student1, student2}; -->
    <select id="queryStudentsWithObjectArray" parameterType="Object[]" resultType="student">
        select * from student
        <!-- 如果SQL片段和引用处不在同一个文件中，则需要在refid引用时，加上namespace: namespace.id -->
        <include refid="ObjectArrayStunos"></include>
    </select>

    <select id="queryStuByStuno" parameterType="int" resultType="student">
            select * from student where stuno = ${value}
    </select>

    <select id="queryStudentByStuno" parameterType="int" resultMap="studentMapping">
            select * from student where stuno = ${value}
    </select>

    <select id="queryStudentByStuname" resultType="student" parameterType="string">
            select stuno, stuname, stuage from student where stuname = '${value}'
    </select>

    <select id="queryStudentOrderByColumn" parameterType="string" resultType="student">
            select stuno, stuname, stuage from student order by ${value} asc
    </select>

    <select id="queryStudentByStuageOrStuname" parameterType="student" resultType="student">
    <!-- select stuno, stuname, stuage from student where stuage = #{stuAge} or stuname like #{stuName} -->
    select stuno, stuname, stuage from student where stuage = #{stuAge} or stuname like '%${stuName}%'
    </select>

    <select id="queryStudentByStuageOrStunameWithHashMap" parameterType="HashMap" resultType="student">
        select stuno, stuname, stuage from student
        where stuage = #{stuAge} or stuname like '%${stuName}%'
    </select>

<!--    <select id="queryStudentByAddress" parameterType="address" resultType="student">-->
<!--        select stuno, stuname, stuage from student where homeaddress = #{homeAddress} or schooladdress = '${schoolAddress}'-->
<!--    </select>-->

<!--    输入参数为级联属性-->
    <select id="queryStudentByAddress" parameterType="student" resultType="student">
        select stuno, stuname, stuage from student where homeaddress = #{address.homeAddress} or schooladdress = '${address.schoolAddress}'
    </select>

    <resultMap type="student" id="studentMapping">
        <!--        分为主键id和非主键result-->
        <id property="stuNo" column="stuno"/>
        <result property="stuName" column="stuname"/>
        <result property="stuAge" column="stuage"/>
        <result property="graName" column="graname"/>
        <result property="stuSex" column="stusex" javaType="boolean" jdbcType="INTEGER"/>
    </resultMap>

<!--    查询：使用了类型转换器
        1. 如果 类中属性 和 表中的字段类型 能够合理识别(String - varchar)，则可以使用resultType；否则(boolean - number)使用resultMap
        2. 如果 类中属性名 和 表中的字段名 能够合理识别(stuNo - stuno)，则可以使用resultType；否则(id - stuno)使用resultMap
-->
    <select id="queryStudentByStunoWithConverter" resultType="student" parameterType="int" resultMap="studentResult">
            select * from student where stuno = #{stuno}
        </select>
    <resultMap type="student" id="studentResult">
<!--        分为主键id和非主键result-->
        <id property="stuNo" column="stuno"/>
        <result property="stuName" column="stuname"/>
        <result property="stuAge" column="stuage"/>
        <result property="graName" column="graname"/>
        <result property="stuSex" column="stusex" javaType="boolean" jdbcType="INTEGER"/>
    </resultMap>

    <insert id="addStudent" parameterType="student">
            insert into student(stuno, stuname, stuage, graname)  values(#{stuNo}, #{stuName},#{stuAge},#{graName})
    </insert>

<!--    带转换器的增加-->
    <insert id="addStudentWithConverter" parameterType="student">
            insert into student(stuno, stuname, stuage, graname, stusex)  values(#{stuNo}, #{stuName}, #{stuAge}, #{graName}, #{stuSex, javaType=boolean, jdbcType=INTEGER})
    </insert>

    <update id="updateStudentByStuno" parameterType="student">
            update student set stuname = #{stuName}, stuage = #{stuAge}, graname = #{graName} where stuno = #{stuNo}
    </update>

    <delete id="deleteStudentByStuno" parameterType="int">
            delete from student where stuno = #{stuno}
    </delete>

    <select id="queryAllStudents" resultType="student">
            select * from student
    </select>

<!--    通过别名作为Map的key-->
    <select id="queryStudentOutByHashMap" resultType="HashMap">
            select stuno "no", stuname "name" from student where stuno = 1
    </select>

    <select id="queryAllStudentsOutByHashMap" resultType="HashMap">
            select stuno "no", stuname "name" from student
    </select>

<!--    通过调用[存储过程]实现查询，statementType="CALLABLE"
        存储过程的输入参数，在MyBatis中用Map来传递(HashMap)
-->
    <select id="queryCountByGradeWithProcedure" statementType="CALLABLE" parameterType="HashMap">
        {
            CALL queryCountByGradeWithProcedure(
                #{gName, jdbcType=VARCHAR, mode=IN},
                #{sCount, jdbcType=INTEGER, mode=OUT}
            )
        }
    </select>

    <!-- 通过存储过程实现删除 -->
    <delete id="deleteStuBynoWithProcedure" statementType="CALLABLE" parameterType="HashMap">
        {
            CALL deleteStuBynoWithProcedure(
                #{sno, jdbcType=INTEGER, mode=IN}
            )
        }
    </delete>
</mapper>